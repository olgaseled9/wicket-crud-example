<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!-- 
    Checkstyle rules definition file.
    Checkstyle provides many checks that you can apply to your sourcecode.
    http://checkstyle.sourceforge.net/availablechecks.html

-->

<module name="Checker">

    <property name="charset" value="UTF-8"/>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength">
        <property name="max" value="4000"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!--===============================================================================
     Code style rules.
    ================================================================================-->
    <module name="TreeWalker">

        <module name="SuppressWarningsHolder" />

        <module name="FileContentsHolder"/>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <!--
            An exception is made for logger declaration. Is it make sense?
        -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>

        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9_]*$"/>
        </module>


        <!-- Indentation rules -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="arrayInitIndent" value="4"/>
            <property name="lineWrappingIndentation" value="0"/>
        </module>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>

        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="TypecastParenPad">
            <property name="option"  value="nospace"/>
        </module>
        <module name="ParenPad"/>
        <module name="MethodParamPad"/>
<!--
        <module name="OperatorWrap"/>
-->

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier">
            <property name="tokens" value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF, RESOURCE"/>
        </module>


        <module name="LineLength">
            <property name="max" value="130"/>
        </module>

        <module name="MethodLength">
            <property name="max" value="150"/>
        </module>

        <module name="ParameterNumber">
            <property name="max" value="7"/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="AnonInnerLength">
            <property name="max" value="60"/>
        </module>
        <module name="LeftCurly">
            <property name="option" value="eol"/>
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF,CTOR_DEF, METHOD_DEF,LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE"/>
        </module>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="LITERAL_ELSE, LITERAL_CATCH"/>
        </module>
        <module name="NeedBraces"/>

        <module name="IllegalImport"> <!-- defaults to sun.* packages -->
            <property name="illegalPkgs" value="java.dummy"/>
        </module>
        <module name="ImportOrder">
            <property name="groups" value="java,javax,org,net,com"/>
            <property name="ordered" value="false"/>
            <property name="separated" value="true"/>
        </module>        
        <module name="UnusedImports"/>

        <module name="JavadocStyle">
           <property name="tokens" value="INTERFACE_DEF, CLASS_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
           <property name="scope" value="protected"/>
           <property name="checkFirstSentence" value="false"/>
           <property name="checkEmptyJavadoc" value="false"/>
           <property name="checkHtml" value="false"/>
        </module>

        <module name="JavadocType">
            <property name="tokens" value="INTERFACE_DEF, CLASS_DEF"/>
            <property name="scope" value="protected"/>
            <property name="allowMissingParamTags" value="false"/>
        </module>
        <module name="IllegalType">
            <property name="illegalClassNames" value="var"/>
        </module>

    </module>


    <!--===============================================================================
     Bad coding practice rules.
    ================================================================================-->
    <!-- Prevent System.out.println() -->
    <module name="RegexpSingleline">
        <property name="format" value="System\.out\.println"/>
    </module>

    <!-- Prevent System.err.println() -->
    <module name="RegexpSingleline">
        <property name="format" value="System\.err\.println"/>
    </module>

    <!-- Prevent printStackTrace() -->
    <module name="RegexpSingleline">
        <property name="format" value="\.printStackTrace"/>
    </module>

    <!-- Prevent empty html paragraph in javadocs -->
    <module name="RegexpSingleline">
        <property name="format" value="&lt;p\/&gt;"/>
    </module>



    <module name="TreeWalker">

        <module name="FileContentsHolder"/>

        <!-- Prevent empty catch blocks-->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_CATCH"/>
        </module>

        <module name="StringLiteralEquality"/>

        <module name="EqualsHashCode"/>

        <module name="UnusedImports"/>

        <module name="BooleanExpressionComplexity">
            <property name="max" value="7"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
    </module>
    <module name="SuppressWarningsFilter"/>

</module>
